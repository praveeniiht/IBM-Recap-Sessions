1. Tell Git who you are 

	git config --global user.name "Sam Smith"

	git config --global user.email sam@example.com

2. Create a new local repository

	git init
	

3. Check out a repository 	
   Create a working copy of a local repository:	

    git clone /path/to/repository

    For a remote server, use:	

    git clone username@host:/path/to/repository


4. Add files 	
   Add one or more files to staging (index):	

	git add <filename>

	git add *


5. Commit 	
   Commit changes to head (but not yet to the remote repository):	

	git commit -m "Commit message"

   Commit any files you've added with git add, and also commit any files 
   you've changed since then:	

	git commit -a



6. Push 	
   Send changes to the master branch of your remote repository:	

	git push origin master


7. Status 	
   List the files you've changed and those you still need to add or commit:	


	git status


8. Connect to a remote repository 	
   If you haven't connected your local repository to a remote server, 
   add the server to be able to push to it:	

	git remote add origin <server>

   List all currently configured remote repositories:	

	git remote -v


9. Branches 	
   Create a new branch and switch to it:	

	git checkout -b <branchname>


10. Switch from one branch to another:	

	git checkout <branchname>

11. List all the branches in your repo, 
    and also tell you what branch you're currently in:	

	git branch

12. Delete the feature branch:	

	git branch -d <branchname>


13. Push the branch to your remote repository, so others can use it:	

	git push origin <branchname>


14. Push all branches to your remote repository:	

	git push --all origin


15. Delete a branch on your remote repository:	

	git push origin :<branchname>


16. Update from the remote repository	
    Fetch and merge changes on the remote server to your working directory:	
 
	git pull

   To merge a different branch into your active branch:	

	git merge <branchname>


17. View all the merge conflicts:

    View the conflicts against the base file:

    Preview changes, before merging:
	
	git diff

	git diff --base <filename>

	git diff <sourcebranch> <targetbranch>


After you have manually resolved any conflicts, you mark the changed file:	



18. git add <filename>



19. Tags	
    You can use tagging to mark a significant changeset, such as a release:	

	git tag 1.0.0 <commitID>

	CommitId is the leading characters of the changeset ID, up to 10, 
        but must be unique. Get the ID using:	


20. git log

	Push all tags to remote repository:	

	git push --tags origin


Undo local changes 	
If you mess up, you can replace the changes in your working tree with the 
last content in head:
Changes already added to the index, as well as new files, will be kept.
	

21. git checkout -- <filename>

    Instead, to drop all your local changes and commits, fetch the latest history 
     from the server and point your local master branch at it, do this:	

22. git fetch origin

    git reset --hard origin/master


23. Search 	
    Search the working directory for foo():	

    git grep "foo()"


Reference: https://confluence.atlassian.com/bitbucketserver/basic-git-commands-776639767.html